Java GC机制主要做三件事：确定哪些内存需要回收，确定什么时候回收，如何执行GC

Java GC的分待收集机制分为三个代，青年代、老年代、永久代

Java程序运行时内存划分：
堆区     虚拟机栈 本地方法栈
方法区     程序计数器

程序计数器：用于指示当前线程所执行的字节码执行到了第几行，字节码解释器通过改变这个数值来取下一条要执行的命令，一个线程就有一个程序计数器

虚拟机栈：一个线程的每个方法在执行的同时，都会创建一个栈帧，栈帧中存放的是方法相关的信息(局部变量表、操作栈、动态链接、方法出口等)。当方法被调用时，栈帧在JVM栈中入栈，当方法执行完成时，栈帧出栈。
局部变量表在编译时就已经确定，方法运行所需要分配的空间在栈帧中是完全确定的，在方法的生命周期内不会改变。
每个线程对应一个虚拟机栈，因此虚拟机栈是线程私有的

本地方法栈：是线程私有的，与虚拟机栈在作用、运行机制、异常类型等方面与虚拟机栈相同，不同的是本地方法栈执行的是native方法，虚拟机栈执行的是Java方法的

堆区：堆区由所有线程共享，在虚拟机启动的时候创建，用于存放对象实例

方法区：是各个线程共享的,用于存放已经被虚拟机加载的类的信息、final常量。静态变量、编译器及时编译的代码。
方法区可以选择是否执行垃圾回收。
方法区上执行的垃圾收集是很少的，这也是方法区被称为永久代的原因之一。其上的垃圾收集主要是针对常量池的内存回收和对已加载类的卸载
运行时常量池是方法区的一部分，用于存储编译器生成的字面常量、符号引用。翻译出来的直接引用。亦可以存储运行期间产生的常量

直接内存：不是JVM管理的内存，是JVM以外的机器内存，由C语言实现的native函数库分配在直接内存中。

Java对象的访问方式
一般的，一个Java的引用访问涉及到3个内存区域：JVM栈，堆，方法区
举例 Object obj = new Object()
Object obj表示一个本地引用，存储在JVM栈的本地变量表中，表示一个reference类型数据
new Object()作为实例对象存储在堆中
堆中还记录了Object类的类型信息(接口、方法、field、对象类型等)的地址。这些地址所执行的数据存放在方法区中

通过reference类型访问具体对象的方式：
通过直接指针访问，reference中存储的就是对象在堆中的实际地址，在堆中存储的对象信息中包含了在方法区中的相应数据。

Java的内存分配和回收的机制就是分代分配，分代回收

年轻代分为三个区域：Eden区(内存首次分配的区域)和两个存活区(Survivor0、Survivor1)。Edon区是连续的，且Survivor总有一个是空的。经过一次GC和复制，一个Survivor中保存着当前存活的对象，而Eden区和另一个Survivor区的内容不需要了，可以直接清空，到下一次GC时，两个Survivor的角色互换。这种成为”停止-复制“清理法

在Eden区，HotSpot虚拟机使用两种技术来加快内存分配，分别是bump-the-pointer和TLAB(Thread-Local Application Buffers)。因为Eden区是连续的，因此bump-the-pointer技术的核心就是追踪会后创建的一个对象，在对象创建时，只需要检查最后一个对象后面是否有足够的内存即可，从而大大加快内存分配速度。而TLAB是针对多线程的，将Eden区分为若干段，每个线程使用独立的一段，避免相互影响。TLAB结合bump-the-pointer技术，保证每个线程都是用Eden区的一段，并快速的分配内存。

年老代：对象如果在年轻代存活的时间足够长而没有被清理掉，则会被复制到年老代。年老代的空间一般比年轻代大，在年老代上发生的GC次数也比年轻代少。当年老代内存不足时，会执行Full GC。
如果对象比较大，Young空间不足，则大对象会直接分配到老年代上(大对象可能提前出发GC，应少用，更应避免使用短命的大对象)
存在年老代对象引用新生代对象的情况，为了提高Young GC效率，年老代维护一个512byte的块，所有老年代对象引用新生代对象的记录都记录在这里，Young GC时，只要查这里即可


Java GC机制 ：分代收集

年轻代：由于绝大部分的对象是短命的，甚至存活不到Survivor中，所以Eden区与Survivor的比例较大，HotSpot默认是8：1，即分别占新生代的80%、10%、10%。如果一次回收中，Survivor和Eden中存活下来内存超过了10%，则需要将一部分对象分配到老年代。JVM可以通过启动参数设置Eden区和Survivor区容量比值。

老年代:使用标记-整理算法，即标记出仍然存活的对象(存在引用的)，将所有存活的对象向一段移动，以保证内存的连续。
在发生Minor GC(Young GC)时，虚拟机会检查每次晋升进入老年代的大小是否大于老年代的剩余空间大小，如果大于则直接触发一次啊Full FC

方法区：永久代回收两种：常量池中的常量、无用的类信息
对无用的类的回收必须保证三点：
1.类的所有实例都已经被回收
2.加载类的ClassLoader已经被回收
3.类对象的Class对象没有被引用(及所有通过反射应用该类的地方)
永久代的回收不是必须的，可以通过参数设置是否对类进行回收

